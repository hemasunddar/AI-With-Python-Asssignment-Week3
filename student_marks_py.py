# -*- coding: utf-8 -*-
"""Student Marks.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hioteUy0h79kUE65GhC8v9ufp_21SkEd
"""

# Student Marks Processor
import numpy as np
from datetime import datetime

# Function to calculate overall marks using weighted average
def calculate_overall(exam, coursework):
    return round((exam * 0.6) + (coursework * 0.4), 2)

# Function to assign grade based on overall mark
def assign_grade(overall):
    if overall >= 90:
        return 'A'
    elif overall >= 75:
        return 'B'
    elif overall >= 60:
        return 'C'
    elif overall >= 50:
        return 'D'
    else:
        return 'F'

# Main processing function
def process_marks(input_file, output_file):
    try:
        data = []
        grades = []

        # Log processing start time
        start_time = datetime.now()
        print(f"Processing started at: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")

        with open(input_file, 'r') as file:
            for line in file:
                # Strip whitespace and split values
                parts = line.strip().split(',')
                if len(parts) != 3:
                    print(f"Skipping invalid line: {line.strip()}")
                    continue

                reg_no, exam_str, coursework_str = parts
                try:
                    exam = float(exam_str)
                    coursework = float(coursework_str)
                except ValueError:
                    print(f"Invalid number format for {reg_no}, skipping.")
                    continue

                # Compute overall and grade
                overall = calculate_overall(exam, coursework)
                grade = assign_grade(overall)

                data.append((reg_no, exam, coursework, overall, grade))
                grades.append(grade)

        # Create structured NumPy array
        dtype = [('RegNo', 'U10'), ('Exam', 'f4'), ('Coursework', 'f4'), ('Overall', 'f4'), ('Grade', 'U2')]
        student_array = np.array(data, dtype=dtype)

        # Sort by overall marks (descending)
        sorted_array = np.sort(student_array, order='Overall')[::-1]

        # Write to output file
        with open(output_file, 'w') as out:
            out.write("RegNo,Exam,Coursework,Overall,Grade\n")
            for row in sorted_array:
                out.write(','.join(map(str, row)) + '\n')

        # Display grade statistics
        print("\nGrade Statistics:")
        unique, counts = np.unique(grades, return_counts=True)
        for grade, count in zip(unique, counts):
            print(f"Grade {grade}: {count} students")

        # Log processing end time
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        print(f"\nProcessing completed at: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Total processing time: {duration:.2f} seconds")

    except FileNotFoundError:
        print(f"Error: The file '{input_file}' was not found.")
    except Exception as e:
        print("An unexpected error occurred:", str(e))

# Example usage
process_marks("student_marks_2.txt", "results.txt")